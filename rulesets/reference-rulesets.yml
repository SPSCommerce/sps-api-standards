     # TODO - validate proper casing for query parameters
  property-names:
    severity: warn
    message: "Invalid property name: {{value}} (expected: lowercase with underscores)"
    recommended: true
    given: "$.paths.*.*.parameters.*.name"
    then:
      function: pattern
      functionOptions:
        match: "^[a-z_]+$"
  
  # TODO - validate proper casing on schema properties
  response-property-names:
    severity: warn
    message: "Invalid response property name: {{property}} (expected: lowercase with underscores)"
    recommended: true
    given: "$..components.schemas.*.properties[*]~"
    then:
      function: pattern
      functionOptions:
        match: "^[a-z_]+$"
   
   
   # TODO - summary is always required for clear explanations
  operation-required-fields:
    severity: error
    message: Missing {{property}} at {{path}}
    given: $.paths.*[get,post,patch,put,delete]
    then:
      - field: "summary"
        function: truthy

  # TODO - respnses must have descriptions?
  ensure-response-description:
    description: Responses must have a description.
    given: $.components.schemas[*]
    severity: error
    recommended: true
    message: "{{error}}"
    then:
      field: description
      function: truthy

  # TODO - parameters must have examples
  params-must-include-examples:
    description: Parameters must include examples
    given: $..parameters.*
    severity: error
    message: "{{description}}; missing {{property}}"
    then:
      function: xor
      functionOptions:
        properties:
          - example
          - examples


  # TODO - parameters must have descriptions?
  ensure-param-description:
    description: Parameters must have a description.
    given: $..*.parameters[*]
    severity: error
    recommended: true
    message: "{{error}}"
    then:
      field: description
      function: truthy

  # TODO -   
  ensure-every-resource-has-title:
    description: Ensures every resource has a title
    given: '$.components.schemas[*]'
    severity: error
    recommended: true
    message: "{{error}}"
    then:
      field: 'title'
      function: truthy

  # TODO - Keep summary short and sweet for ReDoc and similar tooling
  operation-short-summary: 
    description: "Operation summary should be short and sweet, no full stops, and less than 20 characters"
    recommended: true
    type: "style"
    given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]"
    then:
      - field: summary
        function: pattern
        functionOptions:
          notMatch: "\\."
      - field: summary
        function: length
        functionOptions:
          max: 20
  
  # TODO - validate proper casing on other components than schemas and responses?

  # TODO - # Keep operationIds (which often go in the URL) as kebab case
  operationIds-kebab-case:
    description: Operation IDs MUST be written in kebab-case
    message: '{{property}} is not kebab-case: {{error}}'
    recommended: true
    type: style
    given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]"
    then:
      field: operationId
      function: pattern
      functionOptions:
        match: "^([a-z0-9-]+)$"

  # TODO -  Array objects should not have an example, but delegate to the object properties
  array-object-example:
    severity: error
    message: Did not expect {{property}}at {{path}}. Define 'example' data on each property in the object instead
    given: $.paths.*.*.requestBody..[?(@.items)][?(@.type == 'object')]
    then:
      - field: "example"
        function: falsy

  # TODO - All required properties must have an example
  required-property-example:
    severity: error
    given: $..[?(@.type == 'object' && @.required)]
    then:
      - function: requiredPropertyExample

  # TODO - ensure common responses are always included (many others as well to consider... maybe 401 is not one of them)
  # https://github.com/digitalocean/openapi/blob/main/spectral/ruleset.yml#L75
  common-responses-unauthorized:
    description: Responses should contain common response - 401 (unauthorized)
    message: "{{description}}. Missing {{property}}"
    severity: error
    given: $.paths..responses
    then:
      - field: '401'
        function: truthy

  # todo
  az-delete-204-response:
    description: A delete operation should have a 204 response.
    message: A delete operation should have a `204` response.
    severity: warn
    formats: ['oas2','oas3']
    given: $.paths[*].delete.responses
    then:
      function: delete-204-response

  # dissalow headers
  az-header-disallowed:
    description: Authorization, Content-type, and Accept headers should not be defined explicitly.
    message: 'Header parameter "{{value}}" should not be defined explicitly.'
    severity: warn
    formats: ['oas2', 'oas3']
    given:
    - $.paths[*].parameters.[?(@.in == 'header')]
    - $.paths.*[get,put,post,patch,delete,options,head].parameters.[?(@.in == 'header')]
    then:
      function: pattern
      field: name
      functionOptions:
        notMatch: '/^(authorization|content-type|accept)$/i'

  # todo
  az-204-no-response-body:
    description: A 204 response should have no response body.
    severity: warn
    formats: ['oas2']
    given: $.paths[*][*].responses.204
    then:
      field: schema
      function: falsy

  # todo
  az-path-characters:
    description: Path should contain only recommended characters.
    message: Path contains non-recommended characters.
    severity: info
    formats: ['oas2', 'oas3']
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        # Check each path segment individually and ignore param segments
        # Note: the ':' is only allowed in the final path segment
        match: ^(/([0-9A-Za-z._~-]+|{[^}]+}))*(/([0-9A-Za-z._~:-]+|{[^}]*}(:[0-9A-Za-z._~-]+)?))$

  # todo
  az-post-201-response:
    description: Using post for a create operation is discouraged.
    message: Using post for a create operation is discouraged.
    severity: warn
    formats: ['oas2']
    given: $.paths[*].post.responses
    then:
      field: '201'
      function: falsy
  
  # todo
   # https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#172-casing
  az-property-names-convention:
    description: Property names should be camel case.
    message: Property name should be camel case.
    severity: warn
    # This rule can report false positives if run on the resolved spec.
    # Issue: https://github.com/stoplightio/spectral/issues/1316
    resolved: false
    given: $..[?(@.type === 'object' && @.properties)].properties.*~
    then:
      function: casing
      functionOptions:
        type: camel

  # todo
  az-property-type:
    description: All schema properties should have a defined type.
    message: Property should have a defined type.
    severity: warn
    resolved: false
    given: $..properties[?(@object() && @.$ref == undefined)]
    then:
      field: type
      function: truthy


  # todo
  az-put-path:
    description: The path for a put should have a final path parameter.
    message: The path for a put should have a final path parameter.
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths[*].put^~
    then:
      function: pattern
      functionOptions:
        match: '/\}$/'
  
  # todo
  az-request-body-not-allowed:
    description: A get or delete operation must not accept a body parameter.
    severity: error
    formats: ['oas2']
    given:
    - $.paths[*].[get,delete].parameters[*]
    then:
      field: in
      function: pattern
      functionOptions:
        notMatch: '/^body$/'

  # todo
  az-request-body-optional:
    description: Flag optional request body -- common oversight.
    message: The body parameter is not marked as required.
    severity: info
    formats: ['oas2']
    given:
    - $.paths[*].[put,post,patch].parameters.[?(@.in == 'body')]
    then:
      field: required
      function: truthy

  # todo
   az-response-body-type:
    description: Response body schema must not be a bare array.
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths[*][*][responses][*].schema
    then:
      field: type
      function: pattern
      functionOptions:
        notMatch: '/^array$/'
  
  # todo
  az-schema-description-or-title:
    description: All schemas should have a description or title.
    message: Schema should have a description or title.
    severity: warn
    formats: ['oas2', 'oas3']
    given:
    - $.definitions[?(!@.description && !@.title)]
    - $.components.schemas[?(!@.description && !@.title)]
    then:
      function: falsy
  # todo
  az-schema-names-convention:
    description: Schema names should be Pascal case.
    message: Schema name should be Pascal case.
    severity: info
    formats: ['oas2']
    given: $.definitions.*~
    then:
      function: casing
      functionOptions:
        type: pascal

  # todo
  az-security-definition-description:
    description: A security definition should have a description.
    message: Security definition should have a description.
    severity: warn
    formats: ['oas2', 'oas3']
    given: 
    - $.securityDefinitions[*]
    - $.components.securitySchemes[*]
    then:
      field: description
      function: truthy

  # todo
  # All success responses except 202 & 204 should define a response body
  # ref: https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#1321-put
  az-success-response-body:
    description: All success responses except 202 & 204 should define a response body.
    severity: warn
    formats: ['oas2']
    given: $.paths[*][*].responses[?(@property >= 200 && @property < 300 && @property != '202' && @property != '204')]
    then:
      field: schema
      function: truthy


  # todo
  must-use-lowercase-with-hypens-for-path-segements:
    message: Path segments have to be lowercase separate words with hyphens
    description: MUST use lowercase separate words with hyphens for path segments [129]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#129
    severity: error
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        match: ^(([\/a-z][a-z0-9\-\/]*)?({[^}]*})?)+$

  must-use-snake-case-for-query-parameters:
    message: Query parameters must be snake_case
    description: MUST use snake_case (never camelCase) for query parameters [130]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#130
    severity: error
    given: $.paths.*.*.parameters[?(@.in=='query')].name
    then:
      function: pattern
      functionOptions:
        match: ^[a-z][_a-z0-9]*$

  # SHOULD prefer hyphenated-pascal-case for HTTP header fields [132]
  # => https://opensource.zalando.com/restful-api-guidelines/#132

  should-use-hyphenated-pascal-case-for-header-parameters:
    message: Header parameters should be Hyphenated-Pascal-Case
    description: SHOULD prefer hyphenated-pascal-case for HTTP header fields [132]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#132
    severity: warn
    given: $.paths.*.*.parameters[?(@.in=='header')].name
    then:
      function: pattern
      functionOptions:
        match: ^([A-Z][a-z]*)(-[A-Z0-9][a-z0-9]*)*$






   # SHOULD limit number of resource types [146]
  # => https://opensource.zalando.com/restful-api-guidelines/#146

  should-limit-number-of-resource-types:
    message: '{{error}}'
    description: SHOULD limit number of resource types [146]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#146
    severity: warn
    given: $.paths
    then:
      function: count-resource-types
      functionOptions:
        max: 8


  # MUST use standard HTTP status codes [150]
  # => https://opensource.zalando.com/restful-api-guidelines/#150

  must-use-standard-http-status-codes:
    message: '{{property}} is not a standardized response code'
    description: MUST use standard HTTP status codes [150]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#150
    severity: error
    given: $.paths.*.*.responses.*~
    then:
      function: enumeration
      functionOptions:
        values:
          - '100'
          - '101'
          - '200'
          - '201'
          - '202'
          - '203'
          - '204'
          - '205'
          - '206'
          - '207'
          - '300'
          - '301'
          - '302'
          - '303'
          - '304'
          - '305'
          - '307'
          - '400'
          - '401'
          - '402'
          - '403'
          - '404'
          - '405'
          - '406'
          - '407'
          - '408'
          - '409'
          - '410'
          - '411'
          - '412'
          - '413'
          - '414'
          - '415'
          - '416'
          - '417'
          - '423'
          - '426'
          - '428'
          - '429'
          - '431'
          - '500'
          - '501'
          - '502'
          - '503'
          - '504'
          - '505'
          - '511'
          - default


  # MUST define a format for number and integer types [171]
  # => https://opensource.zalando.com/restful-api-guidelines/#171
  # => list of valid types https://github.com/zalando/zally/blob/main/server/zally-ruleset-zalando/src/main/resources/reference.conf#L92-L97

  must-define-a-format-for-number-types:
    message: Numeric properties must have valid format specified
    description: MUST define a format for number and integer types [171]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#171
    severity: error
    given: $.paths.*.*..schema..properties..[?(@.type=='number')]
    then:
      - field: format
        function: defined
      - field: format
        function: pattern
        functionOptions:
          match: ^(float|double|decimal)$

  
  must-define-a-format-for-integer-types:
    message: Numeric properties must have valid format specified
    description: MUST define a format for number and integer types [171]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#171
    severity: error
    given: $.paths.*.*..schema..properties..[?(@.type=='integer')]
    then:
      - field: format
        function: defined
      - field: format
        function: pattern
        functionOptions:
          match: ^(int32|int64|bigint)$

  # SHOULD prefer standard media type name application/json [172]
  # => https://opensource.zalando.com/restful-api-guidelines/#172

  should-prefer-standard-media-type-names:
    message: Custom media types should only be used for versioning
    description: SHOULD prefer standard media type name application/json [172]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#172
    severity: warn
    given: $.paths.*.*.responses.*.content.*~
    then:
      function: pattern
      functionOptions:
        match: ^application\/(problem\+)?json$|^[a-zA-Z0-9_]+\/[-+.a-zA-Z0-9_]+;(v|version)=[0-9]+$

  # SHOULD declare enum values using UPPER_SNAKE_CASE format [240]
  # => https://opensource.zalando.com/restful-api-guidelines/#240

  should-declare-enum-values-using-upper-snake-case-format:
    message: 'Enum values should be in UPPER_SNAKE_CASE format'
    description: SHOULD declare enum values using UPPER_SNAKE_CASE format [240]
    documentationUrl: https://opensource.zalando.com/restful-api-guidelines/#240
    severity: warn
    given: $.paths..[?(@.type=='string')].[enum,x-extensible-enum].*
    then:
      function: pattern
      functionOptions:
        match: ^[A-Z][A-Z_0-9]*$

  operation-summary-formatted:
      description: Operation `summary` should start with upper case and end with a dot.
      recommended: false
      type: style
      given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property ===
      'post' || @property === 'delete' || @property === 'options' || @property ===
      'head' || @property === 'patch' || @property === 'trace' )]"
      then:
        field: summary
        function: pattern
        functionOptions:
          match: "^[A-Z].*\\.$"
      tags:
      - operation

  adidas-headers-no-x-headers:
    description: "All 'HTTP' headers SHOULD NOT include 'X-' headers (https://tools.ietf.org/html/rfc6648)."
    severity: warn
    given: "$..parameters[?(@.in == 'header')].name"
    message: "HTTP headers SHOULD NOT include 'X-' prefix."
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        notMatch: "/^(x|X)-/"


  adidas-oas3-protocol-https-only: # checks how does the servers array values start
    description: "ALL requests MUST go through `https` protocol only"
    formats:
      - oas3
    recommended: true
    severity: error
    message: "Servers MUST be https and no other protocol is allowed."
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"

  # todo many more here to review: https://github.com/jmlue42/spectral-jsonapi-ruleset

#Paths Must Include Version number?
 path-must-include-version:
    description: Path must include the version
    message: "{{description}}; {{property}} incorrect"
    severity: error
    resolved: false
    given: "$.paths[*]~"
    then:
      function: pattern
      functionOptions:
        match: "^/v2/.*$"


- properties do not end with "Dto"
- valid collection schema for collections - https://www.youtube.com/watch?v=MAHW5DmM9j4&ab_channel=OpenAPIInitiative - 11:12



# ---------------------------------------------------------------------------
  # Other rules which are redundant or not feasible
  # ---------------------------------------------------------------------------

  # fields-date-iso8601:
  #   description: Date and time MUST follow [`ISO 8601` standard](https://www.iso.org/iso-8601-date-and-time-format.html)
  #   severity: error
  # fields-language-iso639:
  #   description: Language codes MUST follow [`ISO 639` standard](https://www.iso.org/iso-639-language-codes.html)
  #   severity: error
  # fields-country-iso3166:
  #   description: Country codes MUST follow [`ISO 3166 alpha-2` standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
  #   severity: error
  # fields-currency-iso4217:
  #   description: Currency codes MUST follow [`ISO 4217` standard](https://en.wikipedia.org/wiki/ISO_4217)
  #   severity: error
  # response-303-async-link-header:
  #   description: A successful and finished async api request returns `303` response code and sends the target resource location in the `Link` header
  #   severity: hint